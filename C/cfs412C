import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.math.BigInteger;
import java.util.StringTokenizer;
/**
 * Round 412 Problem C: Success Rate
 * http://codeforces.com/contest/807/problem/C
 * Binary Search, Math
 * @author Ariana Herbst
 * 5/7/17
 */
public class cfs412C {

	public static void main(String[] args) {
		FastScanner sc = new FastScanner();
		int T = sc.nextInt();
		for (int t = 0; t < T; t++) {
			BigInteger X = new BigInteger(sc.next());
			BigInteger Y = new BigInteger(sc.next());
			BigInteger P = new BigInteger(sc.next());
			BigInteger Q = new BigInteger(sc.next());
			if ( P.equals(Q) && Q.equals(BigInteger.ONE)) {
				if (!X.equals(Y)) {
					System.out.println(-1);
				} else if (X.equals(Y) && X.equals(BigInteger.ZERO)) {
					System.out.println(1);
				} else {
					System.out.println(0);
				}
				continue;
			}
			if (P.equals(BigInteger.ZERO)&& !X.equals(BigInteger.ZERO)) {
				System.out.println(-1);
				continue;
			}
			BigInteger t0 = ((Y.mod(Q)).negate().add(Q)).mod(Q);
			if (works(t0, X, Y, P, Q)) {
				System.out.println(t0);
				continue;
			}
			BigInteger two = new BigInteger("2");
			BigInteger d = BigInteger.ONE;
			while (!works(t0.add(d.multiply(Q)), X, Y, P, Q)) {
				d = d.multiply(two);
				/*if (d.compareTo(BigInteger.ZERO) <= 0) {
					d = Long.MAX_VALUE / 4;
					break;
				}*/
			}
			BigInteger low = new BigInteger("1");
			BigInteger high = d;
			for (int i = 0; i < 60 ; i++) {
				BigInteger mid = (low.add(high)).shiftRight(1);
				if (works (t0.add(mid.multiply(Q)), X, Y, P, Q)) {
					high = mid;
				} else {
					low = mid;
				}
			}
			BigInteger ans = works(t0.add(low.multiply(Q)), X, Y, P, Q) ? t0.add(low.multiply(Q)) : t0.add(high.multiply(Q));
			System.out.println(ans);
		}

	}
	
	public static boolean works (BigInteger t, BigInteger x, BigInteger y, BigInteger p, BigInteger q) {
		BigInteger k = ((p.multiply((y.add(t))).divide(q)).subtract(x));
		return k.compareTo(t) <= 0 && k.compareTo(BigInteger.ZERO) >= 0;
	}
	
	
	public static class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(Reader in) {
			br = new BufferedReader(in);
		}

		public FastScanner() {
			this(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String readNextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

		int[] readIntArray(int n) {
			int[] a = new int[n];
			for (int idx = 0; idx < n; idx++) {
				a[idx] = nextInt();
			}
			return a;
		}

		long[] readLongArray(int n) {
			long[] a = new long[n];
			for (int idx = 0; idx < n; idx++) {
				a[idx] = nextLong();
			}
			return a;
		}
	}

}
