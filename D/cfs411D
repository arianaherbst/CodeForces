import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.StringTokenizer;
/**
 * Codeforces Round 411 Problem D: Minimum Number Of Steps
 * http://codeforces.com/contest/805/problem/D
 * Dynamic Programming
 * @author Ariana Herbst
 * 5/4/17
 */
public class cfs411D {
	static long mod = 1_000_000_007;
	public static void main(String[] args) {
		FastScanner sc = new FastScanner();
		char[] c = sc.next().toCharArray();
		boolean bfound = false;
		long seen = 0;
		long count = 0;
		for (int i = c.length-1; i >= 0; i--) {
			if (c[i] == 'a' && bfound) {
				count += seen;
				seen *= 2;
			} else if (c[i] == 'b') {
				seen++;
				bfound = true;
			}
			count %= mod;
			seen %= mod;
		}
		System.out.println(count);

	}
	public static class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(Reader in) {
			br = new BufferedReader(in);
		}

		public FastScanner() {
			this(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String readNextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

		int[] readIntArray(int n) {
			int[] a = new int[n];
			for (int idx = 0; idx < n; idx++) {
				a[idx] = nextInt();
			}
			return a;
		}

		long[] readLongArray(int n) {
			long[] a = new long[n];
			for (int idx = 0; idx < n; idx++) {
				a[idx] = nextLong();
			}
			return a;
		}
	}

}
